Подія – це сигнал від браузера, що щось сталося. Всі DOM-вузли подають такі сигнали (хоча події бувають не тільки в DOM).

Події документа:

DOMContentLoaded – коли HTML завантажено й оброблено, DOM документа повністю побудований і доступний.
CSS події:

transitionend – коли CSS-анімацію завершено.


Синтаксис додавання обробника:

element.addEventListener(event, handler, [options]);
event
Назва події, наприклад "click".
handler
Посилання на функцію-обробник.
options
Додатковий об’єкт із властивостями:
once: якщо true, тоді обробник буде автоматично вилучений після виконання.
capture: фаза, на якій повинен спрацювати обробник, докладніше про це буде розказано у розділі Bubbling and capturing. Так історично склалося, що options може бути false/true, це те саме, що {capture: false/true}.
passive: якщо true, тоді обробник ніколи не викличе preventDefault(), докладніше про це буде розказано у розділі Типові дії браузера.

Є три способи призначення обробників подій:

Атрибут HTML: onclick="...".
Властивість DOM: elem.onclick = function.
Спеціальні методи: elem.addEventListener(event, handler[, phase]) для додавання, removeEventListener для видалення.
HTML-атрибути використовуються рідко тому, що JavaScript у HTML-тегу виглядає трохи дивно. До того ж багато коду там не напишеш.

DOM-властивості можна використовувати, але ми не можемо призначити більше одного обробника на один тип події. У багатьох випадках із цим обмеженням можна миритися.

Останній спосіб найбільш гнучкий, проте потрібно писати більше коду. Є кілька типів подій, які працюють лише через нього, наприклад transitionend та DOMContentLoaded. Також addEventListener підтримує об’єкти-обробники подій. В цьому випадку викликається метод об’єкту handleEvent.

Не важливо, як ви призначаєте обробник, він отримує об’єкт події першим аргументом. Цей об’єкт містить подробиці про те, що сталося.

