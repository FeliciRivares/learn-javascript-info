Нижче наведено більше методів для вставки, вони вказують куди саме буде вставлено вміст:

node.append(...вузли або рядки) – додає вузли або рядки в кінець node,
node.prepend(...вузли або рядки) – вставляє вузли вбо рядки на початку node,
node.before(...вузли або рядки) – вставляє вузли або рядки попереду node,
node.after(...вузли або рядки) – вставляє вузли або рядки після node,
node.replaceWith(...вузли або рядки) – замінює node заданими вузлами або рядками.
Аргументами цих методів може бути довільний список DOM вузлів або текстові рядки(які автоматично перетворюються на текстові вузли).

elem.insertAdjacentHTML(куди, html).

Перший параметр це кодове слово, яке вказує куди вставляти відносно elem. Його значенння має бути одним з наступних:

"beforebegin" – вставити html безпосередньо перед elem,
"afterbegin" – вставити html в elem, на початку,
"beforeend" – вставити html в elem, в кінці,
"afterend" – вставити html безпосередньо після elem.
Другий параметр це рядок у форматі HTML.

Наприклад:

<div id="div"></div>
<script>
  div.insertAdjacentHTML('beforebegin', '<p>Привіт</p>');
  div.insertAdjacentHTML('afterend', '<p>Бувай</p>');
</script>
…виглядатиме як:

<p>Привіт</p>
<div id="div"></div>
<p>Бувай</p>


Видалення вузлів
Щоб видалити вузол використовуйте метод node.remove().

Спробуємо зробити так, щоб наше повідомлення зникало через одну секунду:

<style>
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
</style>

<script>
  let div = document.createElement('div');
  div.className = "alert";
  div.innerHTML = "<strong>Всім привіт!</strong> Ви прочитали важливе повідомлення.";

  document.body.append(div);
  setTimeout(() => div.remove(), 1000);
</script>
Зверніть увагу: якщо ми хочемо перемістити елемент на інше місце в документі – тоді немає потреби його видаляти.

Всі методи вставки автоматично видаляють вузол з попереднього місця розташування.

Клонування елементів 

Виклик elem.cloneNode(true) створює «глибоку» копію елемента – з усіма атрибутами та піделементами. 
Якщо ми викличемо elem.cloneNode(false), тоді буде створена копія без дочірніх елементів

DocumentFragment це спеціальний DOM-вузол який служить обгорткою для передачі списку вузлів.

Ми можемо додавати до нього інші вузли, але коли ми вставляємо кудись його самого, тоді вставляється лише його вміст (контент).

Наприклад, нижче getListContent генерує фрагмент з пунктами <li>, які пізніше вставляються в <ul>

Є ще один дуже застарілий метод щоб додати вміст на веб-сторінку: document.write.

Синтаксис:

<p>Десь на сторінці...</p>
<script>
  document.write('<b>Привіт від JS</b>');
</script>
<p>Кінець</p>
Виклик document.write(html) записує html на сторінку «прямо тут і зараз». Рядок html може бути згенерований динамічно, тож метод дещо гнучкий. За допомою JavaScript ми можемо створити повноцінну веб-сторінку та записати її в документ.

Метод прийшов з тих часів коли не було ані DOM (об’єктної моделі документу), ані стандартів… Справді давні часи. Метод досі живий, тому що є скрипти, в яких він використовується.

В сучасних скриптах він рідко зустрічається через наступні важливі обмеження:

Виклик document.write працює поки сторінка завантажується.

Якщо ми викличемо його пізніше, то існуючий вміст документу буде видалений.

Тому якщо нам потрібно динамічно додати в HTML велику кількість тексту, і ми на стадії завантаження сторінки, і швидкість завантаження має значення – цей метод може допомогти. Але на практиці всі ці вимоги рідко поєднуються. І зазвичай цей метод зустрічається в скриптах лише тому, що вони старі.

Методи для створення нових вузлів:

document.createElement(tag) – створює елемент з заданим тегом,
document.createTextNode(value) – створює текстовий вузол (рідко використовується),
elem.cloneNode(deep) – клонує елемент, якщо deep==true, то з усіма нащадками.





